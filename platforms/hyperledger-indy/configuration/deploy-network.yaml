#########################
# Playbook to create deployment files for namespaces, service account and clusterrolebinding
# Playbook arguments: complete network.yaml
#########################
- hosts: ansible_provisioners
  gather_facts: no
  tasks:
  # ----------------------------------------------------------------------

  # Create namespaces for organizations
  - name: 'Create namespace'
    include_role:
      name: create/namespace
    vars:
      component_name: "{{ organizationItem.name | lower }}-ns"
      component_type_name: "{{ organizationItem.type | lower }}"
      kubernetes: "{{ organizationItem.k8s }}"
      release_dir: "{{playbook_dir}}/../../../{{organizationItem.gitops.release_dir}}/{{ organizationItem.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: organizationItem
    when: network['type'] == 'indy'

  # Create service accounts
  - name: 'Create service accounts'
    include_role:
      name: create/serviceaccount/main
    vars:
      component_ns: "{{ organizationItem.name | lower }}-ns"
      organization: "{{ organizationItem.name | lower }}"
      component_type_name: "{{ organization }}"
      services: "{{ organizationItem.services }}"
      gitops: "{{ organizationItem.gitops }}"
      kubernetes: "{{ organizationItem.k8s }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: organizationItem
    when: network['type'] == 'indy'

  # # Create StorageClass
  # - name: Create Storage Class
  #   include_role:
  #     name: create/storageclass
  #   vars:
  #     organization: "{{ organizationItem.name | lower }}"
  #     component_ns: "{{ organizationItem.name | lower }}-ns"
  #     provider: "{{ organizationItem.cloud_provider }}"
  #     storageclass_name: "{{ provider }}-storageclass"
  #     component_name: "{{ organization }}-{{ storageclass_name }}"
  #     gitops: "{{ organizationItem.gitops }}"
  #     kubernetes: "{{ organizationItem.k8s }}"
  #     aws: "{{ organizationItem.aws }}"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: organizationItem
  #   when: network['type'] == 'indy'

  # Admin K8S auth
  - name: Admin K8S auth
    include_role:
      name: setup/vault_kubernetes
    vars:
      organization: "{{ organizationItem.name | lower }}"
      component_ns: "{{ organizationItem.name | lower }}-ns"
      component_name: "{{ organization }}-baf-ac-vault-auth"
      component_type: "GetServiceAccount"
      vault: "{{ organizationItem.vault }}"
      auth_path: "kubernetes-{{ organization }}-admin-auth"
      kubernetes: "{{ organizationItem.k8s }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: organizationItem
    when: network['type'] == 'indy'

  # Generate auth job
  - name: 'Generate auth job'
    include_role:
      name: setup/auth_job
    vars:
      organization: "{{ organizationItem.name | lower }}"
      component_ns: "{{ organizationItem.name | lower }}-ns"
      component_name: "{{ organization }}"
      services: "{{ organizationItem.services }}"
      kubernetes: "{{ organizationItem.k8s }}"
      vault: "{{ organizationItem.vault }}"
      gitops: "{{ organizationItem.gitops }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: organizationItem
    when: network['type'] == 'indy'

  # # Get Vault AC Token via Service Account
  # - name: Get Vault AC Token via Service Account
  #   include_role:
  #     name: check/k8_component
  #   vars:
  #     organization: "{{ organizationItem.name | lower }}"
  #     component_ns: "{{ organizationItem.name | lower }}-ns"
  #     vault: "{{ organizationItem.vault }}"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: organizationItem
  #   when: network['type'] == 'indy'
    
  # # Generate indy crypto and insert into Vault
  # - name: 'Generate indy crypto and insert into Vault'
  #   include_role:
  #     name: setup/auth_job
  #   vars:
  #     organization: "{{ organizationItem.name | lower }}"
  #     component_ns: "{{ organizationItem.name | lower }}-ns"
  #     component_name: "{{ organization }}"
  #     services: "{{ organizationItem.services }}"
  #     kubernetes: "{{ organizationItem.k8s }}"
  #     vault: "{{ organizationItem.vault }}"
  #     gitops: "{{ organizationItem.gitops }}"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: organizationItem
  #   when: network['type'] == 'indy'


  # # Create and deploy pool genesis
  # - name: 'Create pool genesis'
  #   include_role:
  #     name: setup/pool_genesis
  #   when: network['type'] == 'indy'

  # # Deploy all other nodes
  # - name: 'Deploy nodes'
  #   include_role:
  #     name: setup/node
  #   vars:
  #     organization: "{{ organizationItem.name | lower }}"
  #     component_ns: "{{ organizationItem.name | lower }}-ns"
  #     services: "{{ organizationItem.services }}"
  #     kubernetes: "{{ organizationItem.k8s }}"
  #     vault: "{{ organizationItem.vault }}"
  #     gitops: "{{ organizationItem.gitops }}"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: organizationItem
  #   when: network['type'] == 'indy' and organizationItem.type == 'peer'

  # # delete build directory
  # - name: Remove build directory
  #   file:
  #     path: "./build"
  #     state: absent
