---
# We have enabled additional ports on Ambassador for TCP. By default 8443 is exposed.
# The extra ports are pass as parameter --set ambassador.otherPorts={10010,10020} is taken from network.env.ambassadorPorts
- name: Format ambassador ports
  shell: |
    json=$(echo "{{ stewards }}" | tr -d ' ' | sed "s/'/\"/g" | sed "s/u\"/\"/g" | sed "s/None/\"None\"/g" | sed "s/True/\"True\"/g" | sed "s/False/\"False\"/g")
    length=$(echo "${json}" | jq '.[] | length')
    index=0
    declare -A ports
    while [[ ${index} < ${length} ]]
    do
      steward=$( echo ${json} | jq ".[${index}]")
      name=$(echo ${steward} | jq '.name' | tr -d '"')
      ip=$(echo ${steward} | jq '.publicIp' | sed 's/\./_/g' | sed 's/"/ip/g')
      node_port=$(echo ${steward} | jq '.node.ambassador' | tr -d '"')
      client_port=$(echo ${steward} | jq '.client.ambassador' | tr -d '"')
      if [[ ${name} != null ]]
      then
        if [[ ${ports["${ip}"]} != "" ]]
        then
          ports+=( ["${ip}"]+=, )
        fi
        ports+=( ["${ip}"]+=${node_port},${client_port} )
      fi
      index=$(( ${index} + 1 ))
    done
    key=ip$(echo {{ item.services.stewards[0].publicIp }} | sed 's/\./_/g')ip
    echo ${ports["${key}"]}
  register: terminal
  when: network['type'] == 'indy' and item.services.stewards is defined

- name: Get Elastic IP
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws.access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws.secret_key }}"
  shell: |
    aws ec2 describe-addresses --public-ips {{ item.services.stewards[0].publicIp }} --region {{ aws.region }} --output json | jq '.Addresses[0].AllocationId'
  register: allocation_ip
  when: network.type == 'indy' and item.services.stewards is defined and item.cloud_provider == 'aws' #As this shell code is specific to AWS, cloud provider check has been added

- name: Install Ambassador with EIP for Indy
  shell: |
    KUBECONFIG={{ kubeconfig_path }} helm upgrade --install --namespace default --set ambassador.otherPorts={"{{ terminal.stdout }}"} --set ambassador.eip={{ allocation_ip.stdout }} --set ambassador.targetPort={{ ambassador.targetPort }} --set ambassador.port={{ ambassador.port }} --set ambassador.tag={{ ambassador.tag }} --set ambassador.image={{ ambassador.image }} ambassador {{ playbook_dir }}/../../../platforms/shared/charts/ambassador
  tags:
    - ambassador
  when: network.type == 'indy' and allocation_ip.stdout is defined

- name: Install Ambassador for Corda
  shell: |
    KUBECONFIG={{ kubeconfig_path }} helm upgrade --install --namespace default --set ambassador.otherPorts={"{{ network.env.ambassadorPorts }}"} --set ambassador.targetPort={{ ambassador.targetPort }} --set ambassador.port={{ ambassador.port }} --set ambassador.tag={{ ambassador.tag }} --set ambassador.image={{ ambassador.image }} ambassador {{ playbook_dir }}/../../../platforms/shared/charts/ambassador
  tags:
    - ambassador
  when: network.type == 'corda'

- name: Install Ambassador for Fabric
  shell: |
    KUBECONFIG={{ kubeconfig_path }} helm upgrade --install --namespace default --set ambassador.otherPorts={"{{ network.env.ambassadorPorts }}"} --set ambassador.grpc=enabled --set ambassador.targetPort={{ ambassador.targetPort }} --set ambassador.port={{ ambassador.port }} --set ambassador.tag={{ ambassador.tag }} --set ambassador.image={{ ambassador.image }} ambassador {{ playbook_dir }}/../../../platforms/shared/charts/ambassador
  tags:
    - ambassador
  when: network.type == 'fabric'

- name: Enable external DNS
  shell: |
    KUBECONFIG={{ kubeconfig_path }} kubectl annotate service ambassador --overwrite "external-dns.alpha.kubernetes.io/hostname=*.{{ item.external_url_suffix }}."
  tags:
    - ambassador
  when: network.env.external_dns is defined and network.env.external_dns == 'enabled'

# Wait for Ambassador pods to start running
- name: wait for pods to come up
  k8s_facts:
    kind: Pod
    namespace: default
    kubeconfig: "{{ kubeconfig_path }}"
    context: "{{ kubecontext }}"
    label_selectors:
      - service = ambassador
    field_selectors:
      - status.phase=Running
  register: kubectl_get_pods
  until: kubectl_get_pods.resources|length > 0
  retries: "{{ network.env.retry_count}}"
  delay: 15
  when: (network.type == 'indy' and allocation_ip.stdout is defined) or network.type != 'indy'

